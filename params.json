{"name":"Claudia","tagline":"Simple python library to read output from the Cloudy astrophysical plasma physics code","body":"Claudia is a simplistic python library for reading [Cloudy](https://nublado.org) output files\r\n\r\n# Simple example\r\n\r\nIn this example, we read in the output from a Cloudy model called `hii_test`, and then plot the emissivity of the HÎ± and [O I] lines as a function of the neutral hydrogen fraction. \r\n\r\n```python\r\nfrom claudia import CloudyModel\r\nimport matplotlib.pyplot as plt\r\nm = CloudyModel(\"hii_test\")\r\nplt.plot(m.ovr.HI, m.em.H__1__6563A, label=\"H alpha\")\r\nplt.plot(m.ovr.HI, m.em.O__1__6300A, label=\"[O I] 6300\")\r\nplt.xlabel(\"Neutral hydrogen fraction\")\r\nplt.ylabel(\"log_10 (Emissivity)\") \r\nplt.savefig(\"hii_test_plot.png\")\r\n```\r\n\r\nThe input file `hii_test.in` can be found in the `examples/` folder.\r\n\r\n# Installation\r\nCopy the file `claudia.py` to your working folder (or somewhere else that python will find it).\r\n\r\n# How to use\r\n\r\n## Running the Cloudy model\r\nFirst you need to run a Cloudy model.  You could start by copying `examples/hii_test.in` to your working folder.  Then run the Cloudy executable, for example:\r\n\r\n```sh\r\nCLOUDY=/full/path/to/cloudy/installation/source/cloudy.exe\r\nnohup time $CLOUDY < hii_test.in > hii_test.out &\r\n```\r\n\r\nThat will run Cloudy in the background -- it shouldn't take longer than a minute or two.  Once it finishes, you should have three new files: `hii_test.out`, `hii_test.ovr`, and `hii_test.em`.\r\n\r\n## Using `claudia.py` for reading the output\r\nNow, you can start up python (or better ipython) and have a look at the output (see the simple example above). \r\n\r\n## Further details\r\nEach output file is accessed as an attribute of the `CloudyModel` instance that you created.  In this case, there are only two: `m.ovr` and `m.em`.\r\n\r\nEach column of the file can then be acessed as a sub-attribute, e.g., `m.ovr.depth`, `m.em.N__2__5784A`, each of which return a 1D `numpy` array.  Alternatively, you can also access them as a dictionary: `m.ovr[\"depth\"]`.  To see a list of all the columns available, you can look at `m.ovr.dtype.names`. \r\n\r\n\r\n# How it works\r\n\r\nThe claudia library consists of a single class, `CloudyModel`, which is optimized for the most common use case, although it does have limited facilities for customization.  It reads all the Cloudy output files into a single structure, which can than be accessed as attributes.  \r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}